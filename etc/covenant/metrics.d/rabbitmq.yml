# based on: https://github.com/kbudde/rabbitmq_exporter
- name: overview
  config:
    enabled: ${vars.get('overview_enabled', True) | n,my}
    timeout: ${vars.get('timeout', 10) | n,my}
    url: ${vars.get('url') | n,my}
    path: /overview
    format: json
  labels:
    - name: node
      label_tasks:
        - '@filter': jmespath
          expression: 'node'
  collects:
    - up:
        labels: ~
        on_fail:
          value: 0
        on_noresult:
          value: 0
        type: gauge
        value: 1
        documentation: Could the rabbitmq server be reached.
    - exporter_scrape_failures_total:
        labels: ~
        on_fail:
          value: 1
        on_noresult:
          value: 1
        type: counter
        value: 0
        documentation: Number of errors while scraping rabbitmq.
    - connections_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'object_totals.connections'
        documentation: Total number of open connections.
    - channels_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'object_totals.channels'
        documentation: Total number of open channels.
    - queues_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'object_totals.queues'
        documentation: Total number of queues in use.
    - consumers_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'object_totals.consumers'
        documentation: Total number of consumers.
    - exchanges_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'object_totals.exchanges'
        documentation: Total number of exchanges in use.
    - queue_messages_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'queue_totals.messages'
        documentation: Total number ready and unacknowledged messages in cluster.
    - queue_messages_ready_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'queue_totals.messages_ready'
        documentation: Total number of messages ready to be delivered to clients.
    - queue_messages_unacknowledged_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'queue_totals.messages_unacknowledged'
        documentation: Total number of messages delivered to clients but not yet acknowledged.
    - published_total:
        type: const_counter
        value_tasks:
          - '@filter': jmespath
            expression: 'message_stats.publish'
        documentation: Total number of messages published.
    - published_rate:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'message_stats.publish_details.rate'
        documentation: Message publish rate.
    - delivered_total:
        type: const_counter
        value_tasks:
          - '@filter': jmespath
            expression: 'message_stats.deliver'
        documentation: Total number of messages delivered.
    - delivered_rate:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: 'message_stats.deliver_details.rate'
        documentation: Message delivery rate.
- name: exchanges
  config:
    enabled: ${vars.get('exchanges_enabled', True) | n,my}
    timeout: ${vars.get('timeout', 10) | n,my}
    url: ${vars.get('url') | n,my}
    path: /exchanges
    format: json
  collects:
    - exchange_messages_published_total:
        type: const_counter
        labels:
          - name: vhost
            label_tasks:
              - '@filter': jmespath
                expression: vhost
          - name: exchange
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.publish].{name: [0], publish: [1]}'
              - '@labelize': dict
                'key': name
                'value': publish
                'default': 0
        documentation: Count of messages published.
    - exchange_messages_published_in_total:
        type: const_counter
        labels:
          - name: vhost
            label_tasks:
              - '@filter': jmespath
                expression: vhost
          - name: exchange
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.publish_in].{name: [0], publish_in: [1]}'
              - '@labelize': dict
                'key': name
                'value': publish_in
                'default': 0
        documentation: Count of messages published in to an exchange, i.e. not taking account of routing.
    - exchange_messages_published_out_total:
        type: const_counter
        labels:
          - name: vhost
            label_tasks:
              - '@filter': jmespath
                expression: vhost
          - name: exchange
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.publish_out].{name: [0], publish_out: [1]}'
              - '@labelize': dict
                'key': name
                'value': publish_out
                'default': 0
        documentation: Count of messages published out to an exchange, i.e. not taking account of routing.
- name: nodes
  config:
    enabled: ${vars.get('nodes_enabled', True) | n,my}
    timeout: ${vars.get('timeout', 10) | n,my}
    url: ${vars.get('url') | n,my}
    path: /nodes
    format: json
  labels:
    - name: node
      label_tasks:
        - '@filter': jmespath
          expression: 'name'
  collects:
    - running:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].running'
          - '@filter': builtins
            func: ['bool', 'int']
        documentation: Boolean for whether this node is up.
    - fd_used:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].fd_used'
        documentation: Used File descriptors.
    - fd_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].fd_total'
        documentation: File descriptors available.
    - sockets_used:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].sockets_used'
        documentation: File descriptors used as sockets.
    - sockets_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].sockets_total'
        documentation: File descriptors available for use as sockets.
    - mem_used:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].mem_used'
        documentation: Memory used in bytes.
    - mem_limit:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].mem_limit'
        documentation: Point at which the memory alarm will go off.
    - mem_alarm:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].mem_alarm'
        documentation: Whether the memory alarm has gone off.
    - proc_used:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].proc_used'
        documentation: Number of Erlang processes in use.
    - proc_total:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].proc_total'
        documentation: Maximum number of Erlang processes.
    - disk_free:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].disk_free'
        documentation: Disk free space in bytes.
    - disk_free_limit:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].disk_free_limit'
        documentation: Point at which the disk alarm will go off.
    - disk_free_alarm:
        type: gauge
        value_tasks:
          - '@filter': jmespath
            expression: '[0].disk_free_alarm'
        documentation: Whether the disk alarm has gone off.
- name: queues
  config:
    enabled: ${vars.get('queues_enabled', True) | n,my}
    timeout: ${vars.get('timeout', 10) | n,my}
    url: ${vars.get('url') | n,my}
    path: /queues
    format: json
  collects:
    - queue_messages_ready:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages_ready
                'default': 0
        documentation: Number of messages ready to be delivered to clients.
    - queue_messages:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages
                'default': 0
        documentation: Sum of ready and unacknowledged messages (queue depth).
    - queue_messages_unacknowledged:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages_unacknowledged
                'default': 0
        documentation: Number of messages delivered to clients but not yet acknowledged.
    - queue_messages_ready_ram:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages_ready_ram
                'default': 0
        documentation: Number of messages from messages_ready which are resident in ram.
    - queue_messages_unacknowledged_ram:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages_unacknowledged_ram
                'default': 0
        documentation: Number of messages from messages_unacknowledged which are resident in ram.
    - queue_messages_ram:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages_ram
                'default': 0
        documentation: Total number of messages which are resident in ram.
    - queue_messages_persistent:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': messages_persistent
                'default': 0
        documentation: Total number of persistent messages in the queue (will always be 0 for transient queues).
    - queue_messages_published_total:
        type: const_counter
        labels:
          - name: queue
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.publish].{name: [0], publish: [1]}'
              - '@labelize': dict
                'key': name
                'value': publish
                'default': 0
        documentation: Count of messages published.
    - queue_messages_confirmed_total:
        type: const_counter
        labels:
          - name: queue
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.confirm].{name: [0], confirm: [1]}'
              - '@labelize': dict
                'key': name
                'value': confirm
                'default': 0
        documentation: Count of messages confirmed.
    - queue_messages_delivered_total:
        type: const_counter
        labels:
          - name: queue
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.deliver].{name: [0], deliver: [1]}'
              - '@labelize': dict
                'key': name
                'value': deliver
                'default': 0
        documentation: Count of messages delivered in acknowledgement mode to consumers.
    - queue_messages_delivered_noack_total:
        type: const_counter
        labels:
          - name: queue
            label_tasks:
              - '@filter': jmespath
                expression: '[name,message_stats.deliver_no_ack].{name: [0], deliver_no_ack: [1]}'
              - '@labelize': dict
                'key': name
                'value': deliver_no_ack
                'default': 0
        documentation: Count of messages delivered in no-acknowledgement mode to consumers.
    - queue_message_bytes:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': message_bytes
                'default': 0
        documentation: >-
                         Sum of the size of all message bodies in the queue.
                         This does not include the message properties (including headers) or any overhead.
    - queue_message_bytes_ready:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': message_bytes_ready
                'default': 0
        documentation: Like message_bytes but counting only those messages ready to be delivered to clients.
    - queue_message_bytes_unacknowledged:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': message_bytes_unacknowledged
                'default': 0
        documentation: Like message_bytes but counting only those messages delivered to clients but not yet acknowledged.
    - queue_message_bytes_ram:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': message_bytes_ram
                'default': 0
        documentation: Like message_bytes but counting only those messages which are in RAM.
    - queue_message_bytes_persistent:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': message_bytes_persistent
                'default': 0
        documentation: Like message_bytes but counting only those messages which are persistent.
    - queue_consumers:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': consumers
                'default': 0
        documentation: Number of consumers.
    - queue_consumer_utilisation:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': consumer_utilisation
                'default': 0
        documentation: >-
                         Fraction of the time (between 0.0 and 1.0) that the queue is able to immediately deliver messages to consumers.
                         This can be less than 1.0 if consumers are limited by network congestion or prefetch count.
    - queue_memory:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': memory
                'default': 0
        documentation: Bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures.
    - queue_head_message_timestamp:
        type: gauge
        labels:
          - name: queue
            label_tasks:
              - '@labelize': dict
                'key': name
                'value': head_message_timestamp
                'default': 0
        documentation: >-
                         The timestamp property of the first message in the queue, if present.
                         Timestamps of messages only appear when they are in the paged-in state.
